Recording 
Thursday, April 30, 2020  |  12:22 am  |  Eastern Daylight Time (New York, GMT-04:00)
Duration: 7 hr 41 min 21 sec
Recording password: qTpj64kb
https://ibm.webex.com/recordingservice/sites/ibm/recording/playback/545816f060824317a936298e0acd1456

Monday, May 4, 2020  |  11:59 pm  |  Eastern Daylight Time (New York, GMT-04:00)  
Duration: 5 hr 52 min 38 sec  
Recording password: PdkJnCv9 
https://ibm.webex.com/recordingservice/sites/ibm/recording/playback/7e442cac09eb4109aeadd8db17a3d38e



GIT URL - April 27 to 4 May :

https://github.com/prabhakarmishra/MSVirtualSession2020-2704.git


- Availability
- Agility
- Resilency 
- Scalability

- DevOps
- Automation

https://spring.io/
https://martinfowler.com/articles/microservices.html
https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing
https://martinfowler.com/bliki/BoundedContext.html
https://en.wikipedia.org/wiki/CAP_theorem
https://en.wikipedia.org/wiki/SOLID
https://12factor.net/
https://spring.io/cloud
https://microservices.io/patterns/data/shared-database.html
https://github.com/spring-cloud-samples/configserver
https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html
https://microservices.io/patterns/server-side-discovery.html
https://github.com/spring-projects/spring-security/wiki/OAuth-2.0-Migration-Guide
https://github.com/spring-projects
https://www.youtube.com/watch?v=_I94-tJlovg
https://spring.io/projects/spring-amqp#overview
https://www.infoq.com/news/2018/06/observability-microservices/
https://microservices.io/patterns/reliability/circuit-breaker.html
https://spring.io/projects/spring-cloud-circuitbreaker
https://howtodoinjava.com/spring-cloud/spring-cloud-zipkin-sleuth-tutorial/
https://spring.io/blog/2016/02/15/distributed-tracing-with-spring-cloud-sleuth-and-spring-cloud-zipkin
https://jwt.io/introduction/
https://jwt.io/
https://www.toptal.com/java/rest-security-with-jwt-spring-security-and-java
https://dzone.com/articles/blue-green-deployment-for-cloud-native-application

https://www.youtube.com/watch?v=zf6ogW0HKLY
https://www.youtube.com/watch?v=ndLbn24OwQg


Single-responsibility Principle

- Isolate - Everything - Isolation !!
- Distributed System
- Single Responsibility - One reason to change...
- High Cohesion (Self Contained System) and Low Coupling (No change coupling)
- Domain Oriented (oriented around business capabilities)
- Middleware is dumb
- Governance 
- Autonomy of teams and services
- Automate everything !!! - "Infrstructure As Code"
- Failure is a first class citizen.
- Polyglot | Polyglot Persistence
- Independent Persistence
- Cross Functional Teams
- Independent code bases and pipelines
- No ACID Transactions
- No 2PC 

A - Atomic
C - Consistency
I - Isolation
D - Durability

Consistency
	Strong Consistency
		Eventual Consistency
	Weak Consistency

Componentization via Services
Organized around Business Capabilities
Products not Projects
Smart endpoints and dumb pipes
Decentralized Governance
Decentralized Data Management
Infrastructure Automation
Design for failure
Evolutionary Design

How big is a microservice?
Microservices and SOA
Many languages, many options
Battle-tested standards and enforced standards
Make it easy to do the right thing
The circuit breaker and production ready code
Synchronous calls considered harmful

Spring Cloud configserver then create microservice


Spring Cloud Bus - AMQP
- Queue based 
	Pub / Sub

Spring Secuirty 
	- Outh2.0
192.168.99.100 rabbitmq-master
192.168.99.100 zipkin
192.168.99.100 mysql
192.168.99.100 eureka-1
192.168.99.100 configserver

================================================= docker =================================
docker-machine create -d "virtualbox" docker-vm3
docker images
docker pull nginx:latest
docker run -d nginx
docker run -d -p 80:80 --name mynginx nginx
docker container kill 5c13c97e9e23
docker ps
docker container stop 1696a8e642f8 91ab8776b340
docker ps -a
docker container prune  // Remove all stopped containers.
docker container rm e7e09d318ed9
docker container kill e7e09d318ed9
docker exe -it mynginx /etc/bin // run a command in container, in this case would present a shell.
docker inspect <container>

docker logs bfad35683312 -f

Image is build on a layered file system (union file system)

+++++++++++++++++++++++++++++++++++++++++++= LAB +++++++++++++++++++++++++++++++
docker build -t prabhakarm/configserver30april2020:1 .

docker run -p 8888:8888 -d --name config30April --network ms-chassis-nw prabhakarm/configserver30april2020:1

docker build -t prabhakarm/eureka30april:1 .

docker run -p 8761:8761 -d --name eureka30April --network ms-chassis-nw prabhakarm/eureka30april:1

docker build -t prabhakarm/cloudapigateway30april:1 .

docker run -p 80:9092 -d --name cloudapigateway30April --network ms-chassis-nw prabhakarm/cloudapigateway30april:1

docker build -t prabhakarm/productms30april:1 .

docker run -d --name productms30April --network ms-chassis-nw prabhakarm/productms30april:1 .

docker build -t prabhakarm/discountms30april:1 .

docker run -d --name discountms30April --network ms-chassis-nw prabhakarm/discountms30april:1


docker network ls
docker network create <name>
docker inspect <networkname>


docker push  prabhakarm/cloudapigatewaykol:1


docker.io/prabhakarm/cloudapigatewaykol:1
{docker registry}/{subjectname}/imagename:<imagetag>

docker tag prabhakarm/cloudapigatewaykol:1 prabhakarm/cloudapigatewaykol:latest

docker login
==========================================================
Cloud
ABC Application - Datacenter - 5 nodes 

8 AM-11 AM - 5 M Hit - 80% - 10 PODS  - 1+1+1+1+1+1+1+1+1+1
11 AM - 2 PM - 2 M Hit - 50%-45% - 7 PODS - 1+1+1+1+1+1+1
2 PM to 5 PM - 3 M hit - 50-60%  - 8 POD  - 1+1+1+1+1+1+1
5 PM - 7 PM - 2 M hit - 50%-45%  - 6-7 POD
7 PM to 10 PM - 3 M hit 50-60%  - 8 POD   - 
10 PM to 7: 50 AM - 1/2 M hit - 10-20% - 2 POD - 1 Min - 75% + 1 min utilazation - 40% 


=======K8S======================
https://landscape.cncf.io/
minikube ( dev )
minishift ( OpenShift 1 worker and 1 master)
https://kubernetes.io/docs/home/
https://www.katacoda.com/

kubectl create ns demo
kubectl run nginx --image=nginx --replicas=5 -n demo
kubectl get pods -n demo

kubectl get events -n demo

kubectl get events -n demo
kubectl get events -n demo -w

kubectl get deployment -n demo
kubectl scale deployment nginx --replicas=1 -n demo

kubectl version
kubectl version --short

kubectl config view

kubectl config get-contexts
kubectl config get-clusters

t all nodes on Virtual VM
Login to all nodes and execute the following....
sudo swapoff -a

On Master
1. sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
2. cat /home/master/.kube/config
3. kubectl get nodes
if still getting the issue then below command
    sudo -i
    swapoff -a
    exit
    strace -eopenat kubectl version
	
	
kubectl get secrets

kubectl describe secret <default token>

4. 
	kubectl apply -f admin-user.yaml
	kubectl describe sa admin-user -n kube-system
	kubectl describe secret admin-user-token-rcvmb -n kube-system
	


eyJhbGciOiJSUzI1NiIsImtpZCI6ImtmR2tZZ00wZlFJaEFHX1Fya19Zb1l1NzRLUGpjWW04QXFKaTZhV2VQaUUifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLXJjdm1iIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI0NTBhNzZkZC0wZWYyLTQ0NGMtOGY0ZC0wYWNjNWZjZGQwMTkiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06YWRtaW4tdXNlciJ9.tubX4i2ppEeeP2RPk0fMWRtbljadBHzlL3EA2GYxTxiCHzjbzARE-kKu0_CgzCoi6nAGzz-5f0whUSL0g8rkWuMuxqEmXYGq8sYeGdRVbakFKJXyv4qV5Jpx0s7uqmfEhfKu7tgpsco646e3-pC5zLt0lsdXlDXcWlCtBbDXKGsltkVRLjCwH3Cg-iUPRljLkamOtc7K9Z-pPtaVFHAG6hFmawFZ7id4HrQ24LyQDBd_CNeMZWUWSk1P07-hK4npf08ExH8Il6PGNyHrBPw0ZZYqFb1cZ1jz14cxtqj6syXMlrQT9vRg1IEl236LjiZEIPhMzxU5l8l-96y9Ps4e_Q


5. Copy the token.

On Windows Hosts
kubectl config set-cluster <cluster-name> --insecure-skip-tls-verify=true --server=https://<master-ip>:6443
kubectl config set-credentials <crednam> --token=<copied token from master>
kubectl config set-context <context-name> --cluster=<cluster-name> --user=<crednam> 
kubectl config use-context <context-name>

kubectl get nodes

https://cdn2.hubspot.net/hubfs/1665891/Assets/Kubernetes%20Security%20-%20Operating%20Kubernetes%20Clusters%20and%20Applications%20Safely.pdf?t=1538587424944&_hsenc=p2ANqtz-_7jbqtRATdJAm7eFxtd5u4nVLYuIlrF67z5qbslZ10-I63-RZ4ogqu9iuuEMsx7fskPYWww2jDpVjOvrLs

============== Run the Case Study =============================
Go to mschassis/k8s/rabbitmq

kubectl apply -f rabbitmq-dep-w-k8s.yaml
kubectl apply -f rabbitmq-dep-k8s.yaml
kubectl apply -f rabbitmq-svc-k8s.yaml


Go to mschassis/zipkin
kubectl apply -f zipkin-dep-k8s.yaml
kubectl apply -f zipkin-svc-k8s.yaml

kubectl apply -f configserver-dep-k8s.yaml
kubectl apply -f configserver-svc-k8s.yaml
... once config server runs ...
kubectl apply -f eureka-dep-k8s.yaml
kubectl apply -f eureka-svc-k8s.yaml

kubectl apply -f cloudapigateway-dep-k8s.yaml
kubectl apply -f cloudapigateway-svc-k8s.yaml

kubectl apply -f discountms-dep-k8s.yaml

kubectl apply -f productms-dep-k8s.yaml
=======================

https://micrometer.io/


===================================

ABC - Application- 

(JDK, application code, LIB , any other software) - Image - SIT, UAT, PROD, Any enviorment 

==========================================================================
                   GKE Steps
				   
1. Create the kubernates cluster with 3 nodes
2. spring boot application
https://github.com/prabhakarmishra/spring-boot-lazy-init-example

endpoing would be : http://localhost:8080/lazy
https://www.youtube.com/watch?v=jSYxW_c3M_E

3. git clone https://github.com/prabhakarmishra/spring-boot-lazy-init-example
cd spring-boot-lazy-init-example
ls -ltr
4. ./mvnw clean install
 cd target
java -jar spring-boot-lazy -- snapshot.jar
(snapshot was created after build and install)
5. go to webpreview and see the application working or not
 /lazy check the application working or not
6. lets create the images and store in google registry
7. it will run from init-exmaple directory
command is below
- gcloud projects list - change the below command projectid based on define your project
 ./mvnw com.google.cloud.tools:jib-maven-plugin:build -Dimage=gcr.io/$GOOGLE_CLOUD_PROJECT/spring-boot-exmaple:v1

once image created it will story in google registry with version

8. lets login in google cluster with giving the credentials with zone details

gcloud config set project projectid- [dark-sensor-273013-projectid]
gcloud container clusters get-credentials techprimers-clousetr-1 -- zone us-central1-a

9. kubectl get pods
 kubectl get services
 kubectl get deployment 
10. check the docker
Copy the imagename from container registry
11. docker run -ti --rm -p 8080:8080 gcr.io/$GOOGLE_CLOUD_PROJECT/spring-boot-example:v1
12. kubectl run spring-boot-exmaple --image=gcr.io/$GOOGLE_CLOUD_PROJECT/spring-boot-example:v1 --port 8080
13. check the deployment
kubectl get deployment
kubectl get pods
kubectl get services
14. expose the service via loadbalancer
kubectl expose deployment spring-boot-example --type=LoadBalancer
kubectl get services
15. check the external ip and access the application via external IP
16. it is in 1 pod as of now. lets scale the pods
17. kubectl scale deployment spring-boot-example --replicas=3
18. kubectl get pods











